const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const bcrypt = require('bcrypt-nodejs');
const knex = require('knex');
const Clarifai = require('clarifai');

const app1 = new Clarifai.App({
    apiKey: '8363d37ebc4c4e5f9dd3a0ab5595eb89'
   });
const signin=require('/controllers/signin');
const register=require('/controllers/register');
const profile=require('/controllers/profile');
const image=require('/controllers/image');

const postgres_db = knex({
    client: 'pg',
    connection: {
      host : '127.0.0.1',
      user : 'postgres',
      password : '0106',
      database : 'smart_brain_db'
    }
  });


const app = express();
app.use(bodyParser.json());
app.use(cors());

// const database={
//     users:[
//         {
//             id      : '121',
//             name    : 'John',
//             email   : 'john@gmail.com',
//             password: 'cookie',
//             entries : 0,
//             joinDate: new Date()
//         },
//         {
//             id      : '122',
//             name    : 'sally',
//             email   : 'sally@gmail.com',
//             password: 'chocolate',
//             entries : 0,
//             joinDate: new Date()
//         },
//     ]
// }

app.get('/',(req,res)=>{
    res.json(database.users);
});


app.post('/signin', signin.handleSignin(res,req,postgres_db,bcrypt);
app.post('/register', register.handleRegister(res,req,postgres_db,bcrypt);
app.post('/profile', profile.handleProfile(res,req,postgres_db);
app.post('/image', image.handleImage(res,req,postgres_db);

// app.post('/signin',(req,res)=>{
//     if((req.body.email === database.users[0].email) &&
//        (req.body.password === database.users[0].password)){
//         res.json(database.users[0]);
//     }
//     else{
//         res.json('wrong password');
//     }   
// });

app.post('/register',(req,res)=>{
if(!req.body.name || !req.body.email || !req.body.password){
    return res.status(400).json('empty field register');
}

const bhash = bcrypt.hashSync(req.body.password);

    postgres_db.transaction( tranx =>{
        tranx.insert({
            email: req.body.email,
            hash:bhash
        }).into('login').returning('email')
        .then(retemail=>{
           return tranx('users').returning('*').insert({
                email:retemail[0],
                name:req.body.name,
                joined:new Date()
            }).then(user => {res.json(user[0])})
        })
        .then(tranx.commit)
        .catch(tranx.rollback)
   })
   .catch(err=> res.status(400).json('email already existed'));
 });


//  app.post('/register',(req,res)=>{
//     const {name,email,password} = req.body;
//     postgres_db('users').returning('*').insert({
//         email:email,
//         name:name,
//         joined:new Date()
//     }).then(user => res.json(user[0]))
//     .catch(err=> res.status(400).json('email already existed'));
//  });

// app.post('/register',(req,res)=>{
//     const {name,email,password} = req.body;
//     database.users.push({
//         id      : '123',
//         name    : name,
//         email   : email,
//         password: password,
//         entries : 0,
//         joinDate: new Date()
// });
//     res.json(database.users[database.users.length-1]);
// });

app.get('/profile/:id',(req,res)=>{
    postgres_db.select('*').from('users').where({
        id: req.params.id
    })
    .then(user => {
        if(user.length){res.json(user[0])}
        else{res.status(400).json('not found')}})
    .catch(err => res.status(400).json('error getting user profile'));    
 });

// app.get('/profile/:id',(req,res)=>{
//     const found = '0';
//     database.users.forEach(user=>{
//         if(user.id===req.params.id){
//             res.json('you are our member');
//             found = '1';
//         }
//     });
//     if(found==='0'){
//         res.json('not a member');
//     }
// });

app.put('/image',(req,res)=>{
    postgres_db('users').where('id','=',req.body.id)
    .increment('entries',1)
    .returning('entries')
    .then(entries=> res.json(entries[0]))
    .catch(err=>res.status(400).json('something went wrong'));
    });

// app.put('/image',(req,res)=>{
//     let found = '0';
//     database.users.forEach(user=>{
//         if(user.id===req.body.id){
//             user.entries++;
//             found = '1';
//             res.json(user.entries);
//         }
//     });
//     if(found==='0'){
//         res.json('not a member');
//     }
// });

app.post('/imageUrl',(req,res)=>{
    app1.models.predict(Clarifai.FACE_DETECT_MODEL,req.body.input)
    });
// console.log(database.users[0].name);
app.listen(3001); 

// signin-->post
// register-->post
// profile-->get 
// image-->put